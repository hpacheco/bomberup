[{"name":"Game.Bot","comment":" A library for programming your own bomber bot.\n\nSome basic rules: \n\n  - There are two players on a 11x11 board.\n  - Each player drop bombs on the board.\n  - Each player can initially drop one bomb that explodes one cell to the side.\n  - Players can pick up powerups to increase how many bombs they can drop and how far they explode.\n\n@docs State\n@docs Time\n@docs Position\n@docs line\n@docs column\n@docs above\n@docs below\n@docs leftwards\n@docs rightwards\n@docs Line\n@docs Column\n@docs Cell\n@docs Bomb\n@docs Player\n@docs Move\n@docs readCell\n@docs readBomb\n@docs numBombs\n@docs iterateBombs\n@docs hasBomb\n@docs Bot\n@docs idleBot\n@docs randomBot\n@docs isFreePos\n@docs moveTowards\n@docs iterateBoard\n@docs iterate\n@docs euclidianDistance\n@docs findPowerups\n@docs closestTo\n","unions":[{"name":"Cell","comment":" Each cell on the board can be:\n\n  - A solid wall, which is indestructible;\n  - A box, which can be destroyed by bombs;\n  - An empty space over which players can walk;\n  - A bomb placed by a player;\n  - A power-up, which can be picked up by players.\n\n","args":[],"cases":[["Wall",[]],["Box",[]],["Empty",[]],["Bombs",[]],["Flames",[]]]},{"name":"Move","comment":" One of the possible bot actions (moving to a direction, dropping a bomb, or staying idle). ","args":[],"cases":[["MoveUp",[]],["MoveDown",[]],["MoveLeft",[]],["MoveRight",[]],["DropBomb",[]],["Idle",[]]]}],"aliases":[{"name":"Bomb","comment":" A bomb placed by a player on the board, including:\n  - pos: In which position is it located?\n  - timer: How much time left until it explodes?\n  - radius: How many cells will the explosion burn?\n","args":[],"type":"{ pos : Game.Bot.Position, timer : Basics.Int, radius : Basics.Int }"},{"name":"Bot","comment":" The type of a bot, which reads the current state and decides on a move. ","args":[],"type":"Game.Bot.State -> Game.Bot.Move"},{"name":"Column","comment":" A column identifier from 0 to 10.\n\n  - 0 is the column at the left of the screen.\n  - 11 is the line at the right of the screen.\n\n","args":[],"type":"Basics.Int"},{"name":"Line","comment":" A line identifier from 0 to 10.\n\n  - 0 is the line at the top of the screen.\n  - 11 is the line at the bottom of the screen.\n\n","args":[],"type":"Basics.Int"},{"name":"Player","comment":" A player is either you or your opponent, including:\n\n  - position: Which [`Position`](#Position) is the player at?\n  - bombs: How many bombs can the player drop?\n  - flames: What is the radius of the bombs dropped by the player? \n  - dropped: Which bombs has the player dropped on the board?\n\n","args":[],"type":"{ position : Game.Bot.Position, bombs : Basics.Int, flames : Basics.Int, dropped : Game.Bot.Bombs }"},{"name":"Position","comment":" A position is a (l,c) pair including where l is a line and c a column.\n    As usual in programming languages, position identifiers start at 0.\n ","args":[],"type":"( Game.Bot.Line, Game.Bot.Column )"},{"name":"State","comment":" The state of the game over which your bot can make a decision.\n\n  - [`Time`](#Time) - How much time has ellapsed since the beginning of the game?\n  - [`Board`](#Board) - What is the content of each [`Cell`](#Cell) on the board?\n  - [`Player`](#Player) - Where are you or your opponent?\n\n","args":[],"type":"{ time : Game.Bot.Time, board : Game.Bot.Board, me : Game.Bot.Player, opponent : Game.Bot.Player }"},{"name":"Time","comment":" The game's time starts at 0 and ends at 300 or when no more than one player remains alive.\n","args":[],"type":"Basics.Int"}],"values":[{"name":"above","comment":" The position above a position. ","type":"Game.Bot.Position -> Game.Bot.Position"},{"name":"below","comment":" The position below a position. ","type":"Game.Bot.Position -> Game.Bot.Position"},{"name":"closestTo","comment":" Determines which one, from a list of positions, is the closest to a given position. ","type":"Game.Bot.Position -> List.List Game.Bot.Position -> Maybe.Maybe ( Basics.Float, Game.Bot.Position )"},{"name":"column","comment":" A position's column. ","type":"Game.Bot.Position -> Game.Bot.Line"},{"name":"euclidianDistance","comment":" The arithmetic distance between two positions. ","type":"Game.Bot.Position -> Game.Bot.Position -> Basics.Float"},{"name":"findPowerups","comment":" Finds all powerups in the board. ","type":"Game.Bot.State -> List.List Game.Bot.Position"},{"name":"hasBomb","comment":" Check if a position on the board currently has one or more dropped bombs. ","type":"Game.Bot.Position -> Game.Bot.State -> Basics.Bool"},{"name":"idleBot","comment":" A bot that never moves. ","type":"Game.Bot.State -> Game.Bot.Move"},{"name":"isFreePos","comment":" Checks if a position is free, i.e., is not a wall nor a bomb. ","type":"Game.Bot.Position -> Game.Bot.State -> Basics.Bool"},{"name":"iterate","comment":" Iterates over a list. ","type":"List.List a -> val -> (val -> a -> val) -> val"},{"name":"iterateBoard","comment":" Iterates over all the cells in the board. ","type":"Game.Bot.Board -> val -> (val -> Game.Bot.Position -> Game.Bot.Cell -> val) -> val"},{"name":"iterateBombs","comment":" Iterates over a player's bombs. ","type":"Game.Bot.Bombs -> val -> (val -> Game.Bot.Bomb -> val) -> val"},{"name":"leftwards","comment":" The position to the left of a position. ","type":"Game.Bot.Position -> Game.Bot.Position"},{"name":"line","comment":" A position's line. ","type":"Game.Bot.Position -> Game.Bot.Line"},{"name":"moveTowards","comment":" Moves the bot towards a position. ","type":"Game.Bot.Position -> Game.Bot.State -> Game.Bot.Move"},{"name":"numBombs","comment":" How many bombs are currently dropped by a player. ","type":"Game.Bot.Bombs -> Basics.Int"},{"name":"randomBot","comment":" A bot that moves randomly. ","type":"Game.Bot.State -> Game.Bot.Move"},{"name":"readBomb","comment":" Get the information about a specific dropped bomb. ","type":"Basics.Int -> Game.Bot.Bombs -> Game.Bot.Bomb"},{"name":"readCell","comment":" Get the [`Cell`](#Cell) at a given [`Position`](#Position) in the [`State`](#State). ","type":"Game.Bot.Position -> Game.Bot.State -> Game.Bot.Cell"},{"name":"rightwards","comment":" The position to the right of a position. ","type":"Game.Bot.Position -> Game.Bot.Position"}],"binops":[]}]